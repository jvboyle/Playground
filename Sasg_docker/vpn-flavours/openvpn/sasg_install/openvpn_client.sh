#!/bin/bash
###########################################################################
# Description: Generate Openvpn configuration file
# Author: Joe boyle
# Date: 2016.07.29
# Config: vars file 
# Main: ./sasg_build.sh
# Standalone Usage: ./openvpn_client.sh
# History:
#    2016.07.29 - Original script.
#    2016.04.27 - S.Braun - added loop/array processing to handle multi-sasg config based on 
#               - arrays in vars file.  Properly increments tunnel ip on sasg client side for
#               - multi-sasg setups and properly sets PUBLIC_VYOS_IP for remote IP on first 
#               - sasg pair, then uses PORTABLE_VTUN_CIDR array for additional sasg pairs.
#               - Creates separate client.conf for each sasg though the conf is same for each sasg pair
#    2016.05.16 - S.Braun - added support for VTUN_PORT[] array in vars to set remote port for openvpn tun
#    2017.06.06 - updated directory output files are created in - now in $FN/sasg_client
#    2017.07.17 - fixed setting of vtun_port - in case vars doesn't have each tunnel's vtun port defined
#    2017.08.02 - v2.6 - update to run on sasg directly vs on vyos
#    2017.09.13 - v2.6 - updates to put openvpn configs/status, etc in $SAS_CONFIG - set in sasg_common.sh
#    2017.11.09 - v3.1 - added http-proxy, http-proxy-retry stanza if HTTPS_PROXY variable is defined in vars.
# Notes:
#    Make sure "Tool Variable Input Section" is completed before running.
###########################################################################
set -e
echo "Generating SASG OpenVPN configs......."

source ./vars
source ./sasg_common.sh
SCRIPT_INFO="$0 v$VERSION"

#set -o verbose
##########################################################################
# if multi-sasg then need to ensure there's one portable vtun addr specified for
# each sasg site,  PUBLIC_VYOS_IP used for first sasg pair - SASG_IP_1[0], SASG_IP_2[0]
# PORTABLE_VTUN_CIDR[1] used for SASG_IP_1_[1], etc.

# v2.6 - create template files in current build dir on sasg when sasg_install.sh is unpacked.
FN="/sasg/tmp"

# check if VTUN_PORT[0] is set - if not, use default of port 1194 for all arrays unless otherwise
# specified.
if [ -z ${VTUN_PORT[0]} ];then
  VTUN_PORT[0]=1194
fi

if [[ "${TUNNEL_TYPE^^}" == "MODEL6" ]]; then
   for ((INDEX=1; INDEX<${#SASG_IP_1[@]}; INDEX++))
   do
     if [ -z ${LOCAL_DVPN_IP[$INDEX]} ]; then
        PORTABLE_VTUN_CIDR[$INDEX]=158.87.31.$((INDEX+152))
     else
        PORTABLE_VTUN_CIDR[$INDEX]=${LOCAL_DVPN_IP[$INDEX]}
     fi
   done
   if [ -z ${LOCAL_DVPN_IP[0]} ]; then
      PUBLIC_VYOS_IP=158.87.31.152
   else
      PUBLIC_VYOS_IP=${LOCAL_DVPN_IP[0]}
   fi
fi


for ((INDEX=0; INDEX<${#SASG_IP_1[@]}; INDEX++))
do
  [ -z ${SASG_VIP1[$INDEX]} ] && SASG_VIP1[$INDEX]=${SASG_VIP2[$INDEX]}
  if [[ -f ${FN}/client.conf.${SASG_VIP1[$INDEX]} ]];then
    echo "removing old client.conf.${SASG_VIP1[$INDEX]} file................."
    rm $FN/client.conf.${SASG_VIP1[$INDEX]}
  fi

#  if [[ -f ${FN}/client.conf.${SASG_IP_2[$INDEX]} ]];then
#    echo "removing old client.conf.${SASG_IP_2[$INDEX]} file................."
#    rm $FN/client.conf.${SASG_IP_2[$INDEX]}
#  fi

  echo "Generating client.conf.${SASG_VIP1[$INDEX]}"
  # Create client.c nf Configuration Section
  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  ############################OpenVPN_client.conf###############################
  #echo "status /etc/openvpn/status/vtun0.status 30" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "status ${SAS_CONFIG}/status/vtun0.status 30" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "daemon" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "dev-type tun" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "dev vtun0" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "user openvpn" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "group openvpn" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "persist-key" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "persist-tun" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "ping 10" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "ping-restart 60" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  #echo "ifconfig 3.0.0.2 3.0.0.1" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "ifconfig 3.0.0.$((INDEX+2)) 3.0.0.1" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  # if vars contains vyos side listener port variable, use that, otherwise use default of 1194
  if [ -z "${VTUN_PORT[$INDEX]}" ];then
    echo "rport ${VTUN_PORT[0]}" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  else
    echo "rport ${VTUN_PORT[$INDEX]}" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  fi
  echo "proto tcp-client" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  if [ $INDEX -eq 0 ];then
    echo "remote $PUBLIC_VYOS_IP" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  else
    if [ -z ${PORTABLE_VTUN_CIDR[$INDEX]} ];then
      echo "Error in vars - no PORTABLE_VTUN_CIDR[$INDEX] found to match SASG_IP_1[$INDEX] ! - using 9.9.9.9 - must update!!!"
      echo "remote 9.9.9.9" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
    else
      echo "remote ${PORTABLE_VTUN_CIDR[$INDEX]%/*}" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
    fi
  fi
  echo "cipher aes-256-cbc" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "tls-version-min 1.0" >> $FN/client.conf.${SASG_VIP1[$INDEX]}

# get name of keys files as these are created on the vyos side
  SASGCRT=$(basename $(ls ./keys/*SASG.crt))
  SASGKEY=$(basename $(ls ./keys/*SASG.key))

  echo "ca ${SAS_CONFIG}/auth/ca.crt" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "cert ${SAS_CONFIG}/auth/$SASGCRT" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "key ${SAS_CONFIG}/auth/$SASGKEY" >> $FN/client.conf.${SASG_VIP1[$INDEX]}

  echo "remote-cert-tls server" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "tls-client" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "verb 3" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  echo "log-append /sasg/logs/VPN/sasvpn01" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  # if an http proxy is defined, add entry in client.conf
  if [ ! -z ${HTTPS_PROXY} ];then
    echo "http-proxy ${HTTPS_PROXY} ${HTTPS_PROXY_PORT}" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
    echo "http-proxy-retry" >> $FN/client.conf.${SASG_VIP1[$INDEX]}
  fi
  echo "route 2.0.0.0 255.0.0.0" >> $FN/client.conf.${SASG_VIP1[$INDEX]}

  if [ ! -z ${SASG_IP_2[$INDEX]} ];then
    echo "Generating client.conf.${SASG_IP_2[$INDEX]}"
    cp $FN/client.conf.${SASG_VIP1[$INDEX]} $FN/client.conf.${SASG_IP_2[$INDEX]}
  fi
done
