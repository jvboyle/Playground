#!/bin/bash
###########################################################################
# Description: Generate IPSec configuration file
# Author: Stan Braun
# Date: 2016.07.29
# Config: vars file 
# Main: ./sasg_build.sh
# Standalone Usage: ./ipsec_client.sh
# History:
#    2017.05.24 - Original script.
#    2017.06.05 - updated to create ipsec.conf with leftid=@peerx name vs sasg public ip to allow for 
#               - multiple natted public ips on sasg side.
#    2017.06.06 - updated directory output files are created in - now in $FN/sasg_client
#    2017.08.02 - v2.6 - udpated to run directly on sasg vs on vyos
#    2017.08.10 - v2.6 - added logfile attribute to write ipsec logs to /sasg/logs/VPN/sasgvpn0x
#    2017.09.22 - v2.6.1 - updated for Nginx support - additional tunnels added for sasg_ip's & vips
# Notes:
#    Make sure "Tool Variable Input Section" is completed before running.
###########################################################################
set -e
echo "Generating SASG IPSec configs......."

source ./vars
SCRIPT_INFO="$0 v$VERSION"
# set cur dir (will be sasg_client build dir created when run on the sasg)
FN="/sasg/tmp"

#set -o verbose
##########################################################################

ipsecconf(){
sasg_ip=$1
index=$2

  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP"
  ############################OpenVPN_ipsec.conf###############################
  echo "config setup"
  echo -e "\tprotostack=netkey"

  # loop thru subnets for the site & create tunnel stanzas for each - will come out with same
  # tunnel numbers as cds_vyos_setup.sh creates
  TUN=0
  SASG_SUBNETS=(${CUSTOMER_SUBNETS[$index]})
  for SUBNET in "${SASG_SUBNETS[@]}"
  do
    echo -e "\nconn peer-${PUBLIC_VYOS_IP}-tunnel-${TUN}"
    echo -e "\tleft=${sasg_ip}"
    echo -e "\tleftid=@peer${index}"
    echo -e "\tright=${PUBLIC_VYOS_IP}"
    if [[ "$SUBNET" =~ ^10\. ]];then
       ONE_SUBNET=1.$(echo $SUBNET | cut -d"." -f2-4)
       echo -e "\n# Vyos Remote\n\tleftsubnet=${ONE_SUBNET}"
    else
       echo -e "\n# Vyos Remote\n\tleftsubnet=${SUBNET}"
    fi
    echo -e "\n# Vyos local"
    echo -e "\trightsubnet=2.0.0.0/8"
    echo -e "\n# SASG Primary IP"
    echo -e "\tleftsourceip=${sasg_ip}"
    echo -e "\n\tike=aes256-sha1"
    echo -e "\tikelifetime=3600s"
    echo -e "\tdpddelay=30"
    echo -e "\tdpdtimeout=120"
    echo -e "\tdpdaction=restart"
    echo -e "\tphase2alg=aes256-sha1"
    echo -e "\tsalifetime=3600s"
    echo -e "\trekey=yes"
    echo -e "\trekeymargin=540s"
    echo -e "\ttype=tunnel"
    echo -e "\tpfs=no"
    echo -e "\tcompress=no"
    echo -e "\tauthby=secret"
    echo -e "\tauto=start"
    echo -e "\tkeyingtries=%forever"
    echo -e "\tvti-interface=vti0"
    echo -e "\tvti-routing=yes"
    echo -e "\tvti-shared=yes"
    echo -e "\tmark=0xff00/0xff00"
    ((TUN=TUN+1))
  done # for SUBNET in "${SASG_SUBNETS[@] ...
} # ipsecconf()

if [[ -f ${FN}/ipsec.conf.${SASG_VIP1[$ARRAYNUM]} ]];then
  echo "removing old ipsec.conf.${SASG_VIP1[$ARRAYNUM]} file................."
  rm $FN/ipsec.conf.${SASG_VIP1[$ARRAYNUM]}
fi
CONF1="$FN/ipsec.conf.${SASG_VIP1[$ARRAYNUM]}"

echo "Generating $CONF1"
ipsecconf "${SASG_VIP1[$ARRAYNUM]}" "$ARRAYNUM" >> $CONF1

cp $CONF1 /etc/ipsec.d/site0.conf
