SASG Solution Containers
========================

SASG Containers
---------------

FS paths:

  * Root folder: ``/sasg/clients/${SASG_SHORT_DOMAIN_NAME}/``
  * ``./certs`` - client SSL certs to perform mutually authenticated connection
    to logs listener
  * ``./keys`` - certificates for OpenVPN connection
  * ``./logs/Nginx`` - webserver logs (Nginx used inside SASG to redirect 
    requests to Chef server)
  * ``./logs/Firewall`` - iptables logs generated by SASG container
  * ``./logs/VPN`` - VPN logs to trace SASG <-> SASFW connection

``.env`` file vars:

  * ``IP`` - SASG IP (i.e. VIP)
  * ``LOGPUSH_IP`` - IP to use for pushing the logs (SASG ip is used & nated
    inside container to the actual Chef machine IP)
  * ``SASFW`` - short SASFW machine domain name
  * ``CLIENTDIR`` - parent dir for the SASG root folder (always 
    ``/sasg/clients``)
  * ``IPVLAN_GW`` - gateway for SASG, defined when docker **ipvlan** network
    is created, usually equal to the actual host's GW
  * ``HOST_ONLY_GW`` - gateway for docker **host-only** network, usually 
    ``158.87.34.1``
  * ``HOST_IP`` - SASG host IP
  * ``CHECKER_VERSION`` - version of sidecar logs/config image
  * ``SASGC_VERSION`` - version of sasg image
  * ``CRON_CHECK_CONFIG`` - cron record to override default cron for checking
    configs (default - ``*/15 * * * *``)
  * ``CRON_UPLOAD_LOGS`` - cron record to override default cron for uploading 
    logs (default - ``30 * * * *``)
  * ``DOCKER_HOST_NAME`` - FQDN of SASG host machine
  * ``LOGPUSH_PORT`` - value to override log push port (default ``3444``)
  * ``CERT`` - path to client cert for mutually authentication log pushing
  * ``KEY`` - path to client key for mutually authentication log pushing

Container Services:

  * **sasgc** (``gts-tia-sasg-dev-docker-local.artifactory.swg-devops.com/sasg_build:${SASGC_VERSION}``)
    - main SASG container
  * **checker** (``gts-tia-sasg-dev-docker-local.artifactory.swg-devops.com/sasg-sidecar-checker:${CHECKER_VERSION}``)
    - sidecar container to implement logs push & config checks

Tools Containers
----------------

All the containers below are on **Chef** server (or **CEBW** - if we're talking
about single-machine SDS setup)

FS paths:

  * Root folder: ``/sasg/apps/sas-upload-listener/``
  * ``/sasg/certificates/sas-upload-listener/`` - server key/cert & CA cert to
    allow mutually authenticated connection to logs listener from SASG
  * ``/sasg/logs`` - path where alerts for Mist will be created if needed

``.env`` file vars:

  * ``CRON_ANALYZE_CONFIGS`` - cron record to override default cron for
    analyzing  configs (default - ``*/10 * * * *``)
  * ``CONFIG_ANALYZER_VERSION`` - version of sidecar config analyzer image
  * ``CERTS_PATH`` - path to certs to secure mutually authenticated log push
    channel (usually ``/sasg/certificates/sas-upload-listener``)
  * ``LISTENER_EXTERNAL_PORT`` - value to override log push port (default
    ``3444``)
  * ``LISTENER_VERSION`` - version of SAS listener image
  * ``ENV_ALLOWED_IPS`` - space-separated list of IPs allowed to upload logs
    (defaults to SASFW IP as the actual connection comes from there)
  * ``LOG_WRITER_VERSION`` - version of sidecar logs writer image
  * ``DRY_RUN_MODE`` - is set to ``true`` allows container to start but does
    not perform any log/configs-related activity. Is needed to avoid image
    removal by SLA's ``docker image prune`` command

Container Services:

  * **nginx** (``gts-tia-sasg-dev-docker-local.artifactory.swg-devops.com/sas-upload-listener:${LISTENER_VERSION}``)
    - main SAS listener container
  * **logs-analyzer** (``gts-tia-sasg-dev-docker-local.artifactory.swg-devops.com/chef-sidecar-config-analyzer:${CONFIG_ANALYZER_VERSION}``)
    - sidecar container to implement config analysis and raise alerts if needed
  * **logwriter** (``gts-tia-sasg-dev-docker-local.artifactory.swg-devops.com/chef-sidecar-syslog-writer:${LOG_WRITER_VERSION}``)
    - sidecar container to to redirect uploaded logs into syslog and prepend
    them with auxiliary info (e.g. original file name, log type etc)

References
----------
* `Sidecar pattern <https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar>`_
  - approach allowing us add any number of extra-functionality without the need
  to modify the main application image
