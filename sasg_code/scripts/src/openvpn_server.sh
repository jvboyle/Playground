#!/bin/bash
###########################################################################
# Description: SASFW - Generate Openvpn server configuration file(s)
# Config: vars file 
# Main: ./sasg_build.sh
# Standalone Usage: ./openvpn_client.sh
# History:
#    2016.10.31 - Original script - base is same as openvpn_client.sh run on sasg - original by J Boyle
#               - SBraun - modified for sasfw, import common vars, added work done by Svyatlana Dubrouskaya from
#               - vyos to sasfw migration script to calculate subnet masks & add routes for each customer subnet in vars.
#    2016.11.06 - SBraun - added code to add/remove portable ip's
#    2016.11.07 - SBraun - pulled out set -e - was causing code to exit even if not real err - just blank result,
#               - also added /usr/sbin to ip addr command.  Fixed vtun # in openvpn cfgs -wasn't incrementing.
#    2018.02.12 - SBraun - v3.1.07 chg - add bandwidth script to openvpn setup
#    2018.04.20 - SBraun - v3.2.02 chg - fix to add IPADDR & PREFIX strings properly for additional eth1 portable IPs
#    2018.05.08 - SBraun - v3.2.03 - added remote-cert-tls client to server side openvpn config for #                 mutual key authentication
#    2019.05.14 - SBraun - fixed sed commands to prevent issues when customer endpoint subnets or jumphost ips/vips are in range of 100-109 for first octet - was changing these to 1.  Should only do the first octet swap for 10. subnets.
# Notes:
#    Make sure "Tool Variable Input Section" is completed before running.
###########################################################################
echo "Generating SASFW OpenVPN configs......."

source ./vars
source ./sasg_common.sh
SCRIPT_INFO="$0 v$VERSION"

#set -o verbose
##########################################################################
# if multi-sasg then need to ensure there's one portable vtun addr specified for
# each sasg site,  PUBLIC_VYOS_IP used for first sasg pair - SASG_IP_1[0], SASG_IP_2[0]
# PORTABLE_VTUN_CIDR[1] used for SASG_IP_1_[1], etc.

# v2.6 - create template files in current build dir on sasg when sasg_install.sh is unpacked.
DEF_DIR="/etc/openvpn/server"

# check if VTUN_PORT[0] is set - if not, use default of port 1194 for all arrays unless otherwise
# specified.
if [ -z ${VTUN_PORT[0]} ];then
  VTUN_PORT[0]=1194
fi

# Calculate subnet mask for routes added
Calculate_mask()
{
 subnet=$1
 mask=""
 num=0
 while [ $subnet -ge 8 ]
 do
    mask=$mask"255."
    num=$num+1
    let subnet=$subnet-8
 done
 res=0
 let subnet=8-$subnet
 for ((i=7; i>=$subnet; i--)); do
   let res=$res+2**$i
 done
 mask=${mask}${res}
 num=$num+1
 for ((i=$num; i<4; i++)); do
   mask=${mask}".0"
 done
 echo $mask
}



for ((INDEX=0; INDEX<${#SASG_IP_1[@]}; INDEX++))
do
  if [[ ! $(sudo su - root -c "${DEF_DIR}/server_vtun${INDEX}.conf 2>/dev/null") ]];then
    echo "removing old ${DEF_DIR}/server_vtun${INDEX}.conf file................."
    sudo su - root -c "rm ${DEF_DIR}/server_vtun${INDEX}.conf"
  fi
  if [ -f "${SAS_CONFIG}/server_vtun${INDEX}.conf" ];then
    echo "removing old ${SAS_CONFIG}/server_vtun${INDEX}.conf file................."
    rm ${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi

  echo "Generating ${SAS_CONFIG}/server_vtun${INDEX}.conf  ..."
  # Create server.conf Configuration Section
  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP" > ${SAS_CONFIG}/server_vtun${INDEX}.conf
  ############################OpenVPN_server.conf###############################
  echo "dev-type tun" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "dev vtun${INDEX}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "ping 10" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "ping-restart 60" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "ifconfig 3.0.0.1 3.0.0.$((INDEX+2))" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  if [[ "${TUNNEL_TYPE^^}" != "MODEL6" ]]; then
     if [ $INDEX -eq 0 ];then
        echo "local $PUBLIC_VYOS_IP" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
     else
        if [ -z ${PORTABLE_VTUN_CIDR[$INDEX]} ];then
           echo "Error in vars - no PORTABLE_VTUN_CIDR[$INDEX] found to match SASG_IP_1[$INDEX] ! - using 9.9.9.9 - must update!!!"
           echo "local 9.9.9.9" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
        else
           echo "local ${PORTABLE_VTUN_CIDR[$INDEX]%/*}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
        fi
     fi
  else
      echo "local ${LOCAL_DVPN_IP[$INDEX]}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi
  # if vars contains sasfw side listener port variable, use that, otherwise use default of whatever VTUN_PORT[0] is set to.
  if [ -z "${VTUN_PORT[$INDEX]}" ];then
    echo "lport ${VTUN_PORT[0]}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
    echo "rport ${VTUN_PORT[0]}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  else
    echo "lport ${VTUN_PORT[$INDEX]}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
    echo "rport ${VTUN_PORT[$INDEX]}" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi
  echo "proto tcp-server" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "cipher aes-256-cbc" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  # get name of keys files
  SASGCRT=$(ls $SAS_TLSAUTH_DIR/*.crt|grep -v "ca.crt")
  SASGKEY=$(ls $SAS_TLSAUTH_DIR/*.key)
  SASGDH=$(ls $SAS_TLSAUTH_DIR/dh*.pem)
  echo "ca ${SAS_TLSAUTH_DIR}/ca.crt" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "cert $SASGCRT" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "key $SASGKEY" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "dh $SASGDH" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf

  echo "tls-server" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "tls-version-min 1.2" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf
  echo "remote-cert-tls client" >> ${SAS_CONFIG}/server_vtun${INDEX}.conf

  # if any of the bandwith settings are set in vars, add call to bandwidth setup in openvpn config.
  SETTC=0
  [[ "${#TP_TUN_IN_BW[@]}" -gt 0 ]] && SETTC=1
  [[ "${#TP_TUN_OUT_BW[@]}" -gt 0 ]] && SETTC=1

  if [ "$SETTC" != "0" ];then
    echo "up ${SAS_BIN}/BwSetup.sh" >>${SAS_CONFIG}/server_vtun${INDEX}.conf
    echo "script-security 2" >>${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi

  if [[ "${TUNNEL_TYPE^^}" != "MODEL6" ]]; then
     if [ "${SITE_MESSAGE_ENABLE[INDEX]^^}" != "Y" ]; then
        # for each customer subnet listed in the customer subnets array, add the appropriate route 
        echo "SUBNET $INDEX"
        for item in $(echo "${CUSTOMER_SUBNETS[$INDEX]}")
        do
          #ip=$(echo $item | cut -f1 -d "/" | sed 's/^10/1/')
          ip=$(echo $item | cut -f1 -d "/" | sed 's/^10\./1\./')
          subnet=$(echo $item  | awk -F"/" '{print $2}')
          if [[ -z ${subnet} || ${subnet} -eq 32 ]]; then
             mask="255.255.255.255"
          else
             mask=$(Calculate_mask $subnet)
          fi
          echo "route $ip $mask" >>  ${SAS_CONFIG}/server_vtun${INDEX}.conf
        done
     fi
  else
     for BFIP in ${CUSTPREM_BIGFIX_IP[$INDEX]}
     do
     if [ ! -z "${BFIP}" ]; then
        ip=$(echo ${BFIP} | cut -f1 -d "/" | sed 's/^10\./1\./')
        echo "route $ip 255.255.255.255" >>  ${SAS_CONFIG}/server_vtun${INDEX}.conf
     fi
     done
     for DNS in ${DNS_IP[$INDEX]}
     do
     if [ ! -z "DNS" ]; then
        ip=$(echo ${DNS} | cut -f1 -d "/" | sed 's/^10\./1\./')
        echo "route $ip 255.255.255.255" >>  ${SAS_CONFIG}/server_vtun${INDEX}.conf
     fi
     done
  fi
  if [ ! -z "${SASG_VIP1[$INDEX]}" ]; then
     ip=$(echo ${SASG_VIP1[$INDEX]}| cut -f1 -d "/" | sed 's/^10\./1\./')
     echo "route $ip 255.255.255.255" >>  ${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi
  if [ ! -z "${SASG_IP_1[$INDEX]}" ]; then
     ip=$(echo ${SASG_IP_1[$INDEX]} | cut -f1 -d "/" | sed 's/^10\./1\./')
     echo "route $ip 255.255.255.255" >>  ${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi
  if [ ! -z "${SASG_IP_2[$INDEX]}" ]; then
     ip=$(echo ${SASG_IP_2[$INDEX]} | cut -f1 -d "/" | sed 's/^10\./1\./')
     echo "route $ip 255.255.255.255" >>  ${SAS_CONFIG}/server_vtun${INDEX}.conf
  fi

  echo "Completed building ${SAS_CONFIG}/server_vtun${INDEX}.conf :"
  ls -l ${SAS_CONFIG}/server_vtun${INDEX}.conf
done

if [[ "${TUNNEL_TYPE^^}" != "MODEL6" ]]; then
   ##################################################################################################
   # Process Public Interface IP Aliases (Portable vtun addresses) used for openvpn - 
   #
   # Check if number of currently defined ip aliases match what's defined for PORTABLE_VTUN_CIDR
   #
   # Handle adding one or more portables as well as removing any that were defined but are no longer
   # needed/defined in vars (ie switching from openvpn to ipsec tunnels & no longer need portable).
   ##################################################################################################

   CFGFILE="ifcfg-eth1"
   CFGDIR="/etc/sysconfig/network-scripts"
   NICCFG="${CFGDIR}/${CFGFILE}"
   NICCFG_BKP="${NICCFG}.${DATE}"
   BUILD_DIR=$(pwd)

   # copy ifcfg file to local build dir * chg ownership so we can work on it without sudo
   RET=$(sudo su - root -c "cp -p $NICCFG $BUILD_DIR ;chown $SASOWNER.$SASOWNER $BUILD_DIR/$CFGFILE")
   if [ "$?" -ne 0 ];then
     echo -e "\nERROR:  Failed to copy $NICCFG to local build directory working copy.  Exiting..."
     exit 1
   fi

   # get current ip aliases defined
   CUR_IPCOUNT=$(cat $BUILD_DIR/$CFGFILE |grep -w "IPADDR[1-9]"|wc -l|awk '{print $1}')
   CUR_IPS=$(cat $BUILD_DIR/$CFGFILE |grep -w "IPADDR[1-9]")

   if [ "$CUR_IPCOUNT" != "${#PORTABLE_VTUN_CIDR[@]}" ];then
      echo "Current ip aliases in $CFGFILE \n$CUR_IPS\ndoesn't match PORTABLE_VTUN_CIDR in vars file \n${PORTABLE_VTUN_CIDR[@]}\n..updating current config."
      # backup existing config for $NIC in /etc/sysconfig dir
      echo -e "Backing up existing /etc/sysconfig/network-scripts/${CFGFILE}"
      RET=$(sudo su - root -c "cp -p $NICCFG $NICCFG_BKP")
      if [ "$?" -ne 0 ];then
         echo -e "ERROR: cp -p $NICCFG $NICCFG_BKP failed - $RET - exiting."
         exit 1
      else
        echo -e "Success: cp -p $NICCFG $NICCFG_BKP"
      fi

      # clean up .new file in case script gets run multiple times
      if [ -f "./${CFGFILE}.new" ];then
         rm -f ./${CFGFILE}.new
      fi
      # create new ifconfig file without any ip alias entries
      cat ./${CFGFILE} | egrep -vw "^IPADDR[1-9]|PREFIX[1-9]" >>./${CFGFILE}.new

      # loop through portables defined in vars & add as aliases in new cfg file
      for ((INDEX=1; INDEX<=${#PORTABLE_VTUN_CIDR[@]}; INDEX++))
      do
        ### need to pull CIDR off IPADDR line & only put mask on PREFIX line
       ADDR=$(echo "${PORTABLE_VTUN_CIDR[INDEX]}" |cut -f1 -d '/')
       PREF=$(echo "${PORTABLE_VTUN_CIDR[INDEX]}" |cut -f2 -d '/')
       echo "IPADDR${INDEX}=${ADDR}" >>./${CFGFILE}.new
       echo "PREFIX${INDEX}=${PREF}" >>./${CFGFILE}.new

       #     echo "IPADDR${INDEX}=${PORTABLE_VTUN_CIDR[INDEX]}" >>./${CFGFILE}.new
       #     echo "PREFIX${INDEX}=32" >>./${CFGFILE}.new
      done

      # copy new cfg file to system dir then bring interface down & back up so 
      # all changes take effect
      RET=$(sudo su - root -c "cp $BUILD_DIR/${CFGFILE}.new $NICCFG")
      if [ "$?" -ne 0 ];then
         echo -e "ERROR: cp $BUILD_DIR/${CFGFILE}.new $NICCFG failed - $RET"
         exit 1
      else
         echo -e "${CFGFILE} updated, running ifdown/ifup eth1 to enable changes."
         RET=$(sudo su - root -c "ifdown eth1")
         if [ "$?" -ne 0 ];then
            echo -e "ERROR:  sudo ifdown eth1 failed - $RET"
            exit 1
         else
            echo -e "Success: ifdown eth1"
         fi
         RET=$(sudo su - root -c "ifup eth1")
         if [ "$?" -ne 0 ];then
            echo -e "ERROR:  sudo ifup eth1 failed - $RET"
            exit 1
         else
            echo -e "Success: ifup eth1"
         fi
      fi

   else
     echo -e "all portable IPs defined in vars are configured in $NICCFG .. checking current running configuration...."

   fi

   # Final check - make sure all portables defined on currently running eth1 & interface shows state up
   # all portables are already defined on eth1
   ETH1INET=$(/usr/sbin/ip addr show dev eth1 | egrep "^[0-9]:|inet ")
   RUNNING="true"
   for ((INDEX=1; INDEX<=${#PORTABLE_VTUN_CIDR[@]}; INDEX++))
   do
     echo "$ETH1INET"|grep -qwi "${PORTABLE_VTUN_CIDR[INDEX]}"
     if [ "$?" -ne 0 ];then
        RUNNING="false"
     fi
   done
   if [[ "$RUNNING" == "true" ]];then
      echo -e "all portable ip's are defined & running:\n$ETH1INET"
      exit 0
   else
      echo -e "not all portable ip's found in running config, trying ifdown/ifup eth1 & checking again."
      RET=$(sudo su - root -c "ifdown eth1")
      if [ "$?" -ne 0 ];then
         echo -e "ERROR:  sudo ifdown eth1 failed - $RET"
         exit 1
      else
         echo -e "Success: ifdown eth1"
      fi
      RET=$(sudo su - root -c "ifup eth1")
      if [ "$?" -ne 0 ];then
         echo -e "ERROR:  sudo ifup eth1 failed - $RET"
         exit 1
      else
         echo -e "Success: ifup eth1"
      fi
      ETH1INET=$(/usr/sbin/ip addr show dev eth1 | egrep "^[0-9]:|inet ")
      RUNNING="true"
      for ((INDEX=1; INDEX<=${#PORTABLE_VTUN_CIDR[@]}; INDEX++))
      do
        echo "$ETH1INET"|grep -qwi "${PORTABLE_VTUN_CIDR[INDEX]}"
        if [ "$?" -ne 0 ];then
           RUNNING="false"
        fi
      done
      if [[ "$RUNNING" == "true" ]];then
         echo -e "all portable ip's are defined & running:\n$ETH1INET"
         exit 0
      else
         echo -e "\nERROR: Not all portable IP's are defined & running...exiting."
         exit 1
      fi
   fi
fi