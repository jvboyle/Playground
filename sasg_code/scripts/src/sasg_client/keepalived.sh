#!/bin/bash
###########################################################################
# Description: Generate keepalived.conf for Sasg
# Author: Joe Boyle
# Date: 2016.07.29
# Config: vars file
# Main: ./sasg_build.sh
# Standalone Usage: ./keepalived.sh
# History:
#    2016.07.29 - Original script.
#    2017.03.15 - Added Cleanup
#    2017.04.27 - SBraun - added array looping for multi-sasg configs - creates separate keepalived
#               - config files for each sasg based on arrays defined in vars file.
#     2017.05.30 - jvboyle - added New Script Tracking for vtun0 
#     2017.05.30 - sbraun - openvpn script tracking path change
#     2017.06.02 - sbraun - not all VIP's were getting added to keepalived.conf, added fail 3 on script retry
#     2017.06.02 - sbraun - fixed script line - wasn't adding quotes in keepalived file around script name
#     2017.06.02 - sbraun - removed space after check_VPN line
#     2017.06.06 - updated directory output files are created in - now in $FN/sasg_client
#     2017.08.02 - v2.6 - updated to run directly on sasg vs on vyos
#     2017.08.08 - v2.6 - calling sasg-check-keepalived.sh with nc arg - use netcat for check by default
#     2017.09.19 - v2.6.1 - if HTTPS_PROXY is set in vars then call sasg-check-keepalived.sh with wget arg vs netcat
#     2017.11.09 - v3.1 - fixed bug - if HTTPS_PROXY was set - was only configuring wget option on sasg1 - fixed so added to sasg2 config also
#     2017.12.11 - v3.1.05 - fixed defect 49 - set unicast_peer parameter if no 2nd sasg defined to avoid processing vrrp packets from any other host on subnet
#     2018.05.07 - v3.2.03 - if MACHINE_INTF is set on jumphost (gets set in sasg_main.sh), use that value vs what's set in vars for SASG_NWIF - prevents adding incorrect 
#     2018.05.07 - v3.2.03 - if MACHINE_SUBNET_MASK is blank use 26 as default subnet mask, otherwise use the value found in sasg_main.sh for the specific JH network interface.
# Notes:
#    Make sure "var file" is completed before running.
###########################################################################
set -e
###########################################################################
echo "Generating Keepalived.conf........"

source ./vars
SCRIPT_INFO="$0 v$VERSION"

# 3.2.03 - if we have a MACHINE_INTF variable set (should get set to the proper interface name in sasg_main), we use that
# and don't run a sed to update the keepalived template file with whatever SASG_NWIF is set to in vars.
if [ ! -z "$MACHINE_INTF" ];then
  SASG_NWIF=${MACHINE_INTF}
fi

if [ -z "$MACHINE_SUBNET_MASK" ];then
  #subnet mask not set for JH interface - use 26 as default
  MACHINE_SUBNET_MASK=26
fi

#set -o verbose
# v2.6 - set to current build dir - will be sasg_client when run via sasg_install.sh 
FN="."
#########################################################################
# if multi-sasg then need to ensure there's one portable vtun addr specified for
# each sasg site,  PUBLIC_VYOS_IP used for first sasg pair - SASG_IP_1[0], SASG_IP_2[0]
# PORTABLE_VTUN_CIDR[1] used for SASG_IP_1_[1], etc.
if [ "$TUNNEL_TYPE" == "ipsec" ];then
 TRACK="ip_vti0"
else
 TRACK="vtun0"
fi

for ((INDEX=0; INDEX<${#SASG_IP_1[@]}; INDEX++))
do
  if [[ -f ${FN}/keepalived.conf.${SASG_IP_1[$INDEX]} ]];then
    echo "removing old keepalived.conf.${SASG_IP_1[$INDEX]}"
    rm $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  fi

  echo "Generating keepalived.conf.${SASG_IP_1[$INDEX]}"

  # Create Keepalived.conf Configuration Section
  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  ############################Master_keepalived.conf###############################
  echo "vrrp_script check_VPN {" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  if [ ! -z "${HTTPS_PROXY}" ];then
    echo -e ' \t script     "/sasg/bin/sasg-check-keepalived.sh wget"' >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  else
    echo -e ' \t script     "/sasg/bin/sasg-check-keepalived.sh nc"' >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  fi
  echo "#run script every 10 seconds" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "interval 10" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  #Will check if there are 3 failures in a row and if Yes then marking the script as failed.
  echo -e ' \t ' "fall 3" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "rise 3" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo "}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo "vrrp_instance 255 {" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "state MASTER" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "interface $SASG_NWIF" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "nopreempt $SASG_NWIF" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "virtual_router_id 255" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "priority 150" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "advert_int 1" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "virtual_ipaddress {" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "${SASG_VIP1[$INDEX]}/${MACHINE_SUBNET_MASK}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  if [ ! -z "${SASG_VIP2[$INDEX]}" ];then
    echo -e ' \t ' "${SASG_VIP2[$INDEX]}/${MACHINE_SUBNET_MASK}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  fi
  if [ ! -z "${SASG_VIP3[$INDEX]}" ];then
    echo -e ' \t ' "${SASG_VIP3[$INDEX]}/${MACHINE_SUBNET_MASK}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  fi
  echo "     }" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  if [ ! -z "${SASG_IP_2[$INDEX]}" ];then
    echo -e "\nunicast_peer {" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
    echo -e ' \t ' "${SASG_IP_2[$INDEX]}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
    echo -e "}\n" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  else
   # if no 2nd sasg ip is defined, set unicast peer to first sasg ip address to avoid vrrp issues.
    echo -e "\nunicast_peer {" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
    echo -e ' \t ' "${SASG_IP_1[$INDEX]}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
    echo -e "}\n" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  fi
  echo "track_script {" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo "   check_VPN" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo "}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "notify_master \"/usr/libexec/keepalived/master-backup.sh MASTER\"" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "notify_backup \"/usr/libexec/keepalived/master-backup.sh BACKUP\"" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo -e ' \t ' "notify_fault \"/usr/libexec/keepalived/master-backup.sh FAULT\"" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo "     }" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  echo "}" >> $FN/keepalived.conf.${SASG_IP_1[$INDEX]}
  ###########################End Config######################

done

for ((INDEX=0; INDEX<${#SASG_IP_2[@]}; INDEX++))
do
  if [[ -f ${FN}/keepalived.conf.${SASG_IP_2[$INDEX]} ]];then
    echo "removing old keepalived.conf.${SASG_IP_2[$INDEX]}"
    rm $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  fi

  echo "Generating keepalived.conf.${SASG_IP_2[$INDEX]}"
  # Create Keepalived.conf Configuration Section
  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  ############################Backup_keepalived.conf###############################
  echo "vrrp_script check_VPN {" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  if [ ! -z "${HTTPS_PROXY}" ];then
    echo -e ' \t script     "/sasg/bin/sasg-check-keepalived.sh wget"' >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  else
    echo -e ' \t script     "/sasg/bin/sasg-check-keepalived.sh nc"' >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  fi
  echo "#run script every 10 seconds" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "interval 10" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  #Will check if there are 3 failures in a row and if Yes then marking the script as failed.
  echo -e ' \t ' "fall 3" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "rise 3" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "vrrp_instance 255 {" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "state MASTER" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "interface $SASG_NWIF" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "nopreempt $SASG_NWIF" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "virtual_router_id 255" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "priority 100" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "advert_int 1" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "virtual_ipaddress {" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "${SASG_VIP1[$INDEX]}/${MACHINE_SUBNET_MASK}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  if [ ! -z "${SASG_VIP2[$INDEX]}" ];then
    echo -e ' \t ' "${SASG_VIP2[$INDEX]}/${MACHINE_SUBNET_MASK}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  fi
  if [ ! -z "${SASG_VIP3[$INDEX]}" ];then
    echo -e ' \t ' "${SASG_VIP3[$INDEX]}/${MACHINE_SUBNET_MASK}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  fi
  echo "     }" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e "\nunicast_peer {" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "${SASG_IP_1[$INDEX]}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e "}\n" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "track_script {" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "   check_VPN" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "notify_master \"/usr/libexec/keepalived/master-backup.sh MASTER\"" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "notify_backup \"/usr/libexec/keepalived/master-backup.sh BACKUP\"" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo -e ' \t ' "notify_fault \"/usr/libexec/keepalived/master-backup.sh FAULT\"" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "     }" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  echo "}" >> $FN/keepalived.conf.${SASG_IP_2[$INDEX]}
  ###########################End Config######################
done
