#!/bin/bash
###########################################################################
# Description: Generate IPSec configuration file
# Author: Stan Braun
# Date: 2016.07.29
# Config: vars file 
# Main: ./sasg_build.sh
# Standalone Usage: ./ipsec_client.sh
# History:
#    2017.05.24 - Original script.
#    2017.06.05 - updated to create ipsec.conf with leftid=@peerx name vs sasg public ip to allow for 
#               - multiple natted public ips on sasg side.
#    2017.06.06 - updated directory output files are created in - now in $FN/sasg_client
#    2017.08.02 - v2.6 - udpated to run directly on sasg vs on vyos
#    2017.08.10 - v2.6 - added logfile attribute to write ipsec logs to /sasg/logs/VPN/sasgvpn0x
#    2017.09.22 - v2.6.1 - updated for Nginx support - additional tunnels added for sasg_ip's & vips
#    2017.12.11 - v3.1.05 - fix for when sasg_ip is not a 10. - separate tunnels for nginx traffix were getting leftsubnet parameter
#                 changed to a 1. address even for non- 10. sasg ip's.
#    2017.12.12 - SBraun - fixed issue with tunnel created for 2nd sasg ip/vip with /32 CIDR even if 2nd sasg not defined.
#    2018.02.22 - SDubrouskaya added IAMaaS support.
#    2018.04.04 - SBraun - added check if SASG_VIP2 is non-blank before trying to add tunnel for it
#    2018.08.10 - SBraun - v3.3 - changed TOOLS_SUBNET2 to 2.0.0.0/8 to allow traffic back to IAM LB 2dot ip address which doesn't sit in SDS subnet.
# Notes:
#    Make sure "Tool Variable Input Section" is completed before running.
###########################################################################
set -e
echo "Generating SASG IPSec configs......."

source ./vars
SCRIPT_INFO="$0 v$VERSION"
# set cur dir (will be sasg_client build dir created when run on the sasg)
FN="."

#IAMaaS section
if [[ -z "$IAMAAS_PRIMARY_SUBNET" && -z "$IAMAAS_PORTABLE_SUBNET" ]]; then
   IAMaaS=NO
elif [[ -z "$IAMAAS_MAPPING" || -z "$LB_JUNCTION" ]]; then
    echo -e "\nERROR: Not all IAMaaS variables are specified. Please check."
    exit 1
else
    IAMaaS=YES
fi
#end IAMaaS section

#set -o verbose
##########################################################################

ipsecconf(){
sasg_ip=$1
index=$2

  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP"
  ############################OpenVPN_ipsec.conf###############################
  echo "config setup"
  echo -e "\tprotostack=netkey"
  echo -e "\tlogfile=CHANGEME"

  # loop thru subnets for the site & create tunnel stanzas for each - will come out with same
  # tunnel numbers as cds_vyos_setup.sh creates
  TUN=0
  SASG_SUBNETS=(${CUSTOMER_SUBNETS[$index]})
  for SUBNET in "${SASG_SUBNETS[@]}"
  do
    echo -e "\nconn peer-${PUBLIC_VYOS_IP}-tunnel-${TUN}"
    echo -e "# SASG Primary IP"
    echo -e "\tleft=SASG_LEFT"
    echo -e "\n# Customer's Premise Firewall Public MASQ IP"
    #echo -e "\tleftid=\"${SASG_MASQ_IP[$index]}\""
    echo -e "\tleftid=\"@peer${index}\""
    echo -e "\n# Vyos Public IP"
    echo -e "\tright=${PUBLIC_VYOS_IP}"
    if [[ "$SUBNET" =~ ^10\. ]];then
       ONE_SUBNET=1.$(echo $SUBNET | cut -d"." -f2-4)
       echo -e "\n# Vyos Remote\n\tleftsubnet=${ONE_SUBNET}"
    else
       echo -e "\n# Vyos Remote\n\tleftsubnet=${SUBNET}"
    fi
    echo -e "\n# Vyos local"
    #TOOLS_SUBNET2=2.$(echo $TOOLS_SUBNET|cut -d"." -f2-4)
    # v3.3 - chgd to 2.0.0.0/8 to allow traffic back to IAM LB 2. ip address which doesn't sit in SDS subnet.
    TOOLS_SUBNET2=2.0.0.0/8
    echo -e "\trightsubnet=${TOOLS_SUBNET2}"

    echo -e "\n# SASG Primary IP"
    echo -e "\tleftsourceip=${sasg_ip}"
    echo -e "\n\tike=aes256-sha1-modp1024"
    echo -e "\tikelifetime=3600s"
    echo -e "\tdpddelay=30"
    echo -e "\tdpdtimeout=120"
    echo -e "\tdpdaction=restart"
    echo -e "\tphase2alg=aes256-sha1"
    echo -e "\tsalifetime=3600s"
    echo -e "\trekey=yes"
    echo -e "\trekeymargin=540s"
    echo -e "\ttype=tunnel"
    echo -e "\tpfs=no"
    echo -e "\tcompress=no"
    echo -e "\tauthby=secret"
    echo -e "\tauto=start"
    echo -e "\tkeyingtries=%forever"
    echo -e "\tvti-interface=vti0"
    echo -e "\tvti-routing=no"
    echo -e "\tmark=0xff00/0xff00"
    ((TUN=TUN+1))
  done # for SUBNET in "${SASG_SUBNETS[@] ...

  if [ ! -z "${SASG_IP_2[index]}" ];then
   if [ ! -z "${SASG_VIP2[index]}" ];then
     SASGIPS="${SASG_IP_1[index]}/32 ${SASG_IP_2[index]}/32 ${SASG_VIP1[index]}/32 ${SASG_VIP2[index]}/32"
   else
     SASGIPS="${SASG_IP_1[index]}/32 ${SASG_IP_2[index]}/32 ${SASG_VIP1[index]}/32"
   fi
  else
   SASGIPS="${SASG_IP_1[index]}/32 ${SASG_VIP1[index]}/32"
  fi

   for SASGIP in $SASGIPS
   do
    echo -e "\nconn peer-${PUBLIC_VYOS_IP}-tunnel-${TUN}"
    echo -e "# SASG Primary IP"
    echo -e "\tleft=SASG_LEFT"
    echo -e "\n# Customer's Premise Firewall Public MASQ IP"
    #echo -e "\tleftid=\"${SASG_MASQ_IP[$index]}\""
    echo -e "\tleftid=\"@peer${index}\""
    echo -e "\n# Vyos Public IP"
    echo -e "\tright=${PUBLIC_VYOS_IP}"
    if [[ "$SASGIP" =~ ^10\. ]];then
      ONE_SASGIP=1.$(echo $SASGIP | cut -d"." -f2-4)
      echo -e "\n# Vyos Remote\n\tleftsubnet=${ONE_SASGIP}"
    else
      echo -e "\n# Vyos Remote\n\tleftsubnet=${SASGIP}"
    fi
    echo -e "\n# Vyos local"
    #TOOLS_SUBNET2=2.$(echo $TOOLS_SUBNET|cut -d"." -f2-4)
    # v3.3 - chgd to 2.0.0.0/8 to allow traffic back to IAM LB 2. ip address which doesn't sit in SDS subnet.
    TOOLS_SUBNET2=2.0.0.0/8
    echo -e "\trightsubnet=${TOOLS_SUBNET2}"

    echo -e "\n# SASG Primary IP"
    echo -e "\tleftsourceip=${sasg_ip}"
    echo -e "\n\tike=aes256-sha1-modp1024"
    echo -e "\tikelifetime=3600s"
    echo -e "\tdpddelay=30"
    echo -e "\tdpdtimeout=120"
    echo -e "\tdpdaction=restart"
    echo -e "\tphase2alg=aes256-sha1"
    echo -e "\tsalifetime=3600s"
    echo -e "\trekey=yes"
    echo -e "\trekeymargin=540s"
    echo -e "\ttype=tunnel"
    echo -e "\tpfs=no"
    echo -e "\tcompress=no"
    echo -e "\tauthby=secret"
    echo -e "\tauto=start"
    echo -e "\tkeyingtries=%forever"
    echo -e "\tvti-interface=vti0"
    echo -e "\tvti-routing=no"
    echo -e "\tmark=0xff00/0xff00"
    ((TUN=TUN+1))
   done
#IAMaaS section
  if [ "$IAMaaS" == "YES" ]; then
     echo -e "###IAMaaS"
     for SUBNET in "${SASG_SUBNETS[@]}"
     do
       IAMAAS_SUBNETS=(${IAMAAS_PRIMARY_SUBNET} ${IAMAAS_PORTABLE_SUBNET})
       for IAMAAS_SUBNET in "${IAMAAS_SUBNETS[@]}"
       do
         echo -e "\nconn peer-${PUBLIC_VYOS_IP}-tunnel-${TUN}"
         echo -e "# SASG Primary IP"
         echo -e "\tleft=SASG_LEFT"
         echo -e "\n# Customer's Premise Firewall Public MASQ IP"
         #echo -e "\tleftid=\"${SASG_MASQ_IP[$index]}\""
         echo -e "\tleftid=\"@peer${index}\""
         echo -e "\n# Vyos Public IP"
         echo -e "\tright=${PUBLIC_VYOS_IP}"
         if [[ "$SUBNET" =~ ^10\. ]];then
            ONE_SUBNET=1.$(echo $SUBNET | cut -d"." -f2-4)
            echo -e "\n# Vyos Remote\n\tleftsubnet=${ONE_SUBNET}"
         else
            echo -e "\n# Vyos Remote\n\tleftsubnet=${SUBNET}"
         fi
         echo -e "\n# Vyos local"
         TWO_IAMAAS_SUBNET=2.$(echo $IAMAAS_SUBNET | cut -d"." -f2-4)
         echo -e "\trightsubnet=$TWO_IAMAAS_SUBNET"

         echo -e "\n# SASG Primary IP"
         echo -e "\tleftsourceip=${sasg_ip}"
         echo -e "\n\tike=aes256-sha1-modp1024"
         echo -e "\tikelifetime=3600s"
         echo -e "\tdpddelay=30"
         echo -e "\tdpdtimeout=120"
         echo -e "\tdpdaction=restart"
         echo -e "\tphase2alg=aes256-sha1"
         echo -e "\tsalifetime=3600s"
         echo -e "\trekey=yes"
         echo -e "\trekeymargin=540s"
         echo -e "\ttype=tunnel"
         echo -e "\tpfs=no"
         echo -e "\tcompress=no"
         echo -e "\tauthby=secret"
         echo -e "\tauto=start"
         echo -e "\tkeyingtries=%forever"
         echo -e "\tvti-interface=vti0"
         echo -e "\tvti-routing=no"
         echo -e "\tmark=0xff00/0xff00"
         ((TUN=TUN+1))
      done  
    done #IAM subnet
  fi
#end IAMaaS section
} # ipsecconf()

##########################################################################
# multi-sasg with IPSec - just uses different site-to-site peer ip's on  the tunnels
# doesnt use portable_vtun_cidr like openvpn
# It does however use the SASG_MASQ_IP and there should be one MASQ_IP per SASG_IP_1
# with the array #s matching per site- ie CUSTOMER_SUBNETS[1], SASG_MASQ_IP[1], SASG_IP_1[1]
for ((INDEX=0; INDEX<${#SASG_IP_1[@]}; INDEX++))
do
  if [[ -f ${FN}/ipsec.conf.${SASG_IP_1[$INDEX]} ]];then
    echo "removing old ipsec.conf.${SASG_IP_1[$INDEX]} file................."
    rm $FN/ipsec.conf.${SASG_IP_1[$INDEX]}
  fi
  if [[ -f ${FN}/ipsec.conf.${SASG_IP_2[$INDEX]} ]];then
    echo "removing old ipsec.conf.${SASG_IP_2[$INDEX]} file................."
    rm $FN/ipsec.conf.${SASG_IP_2[$INDEX]}
  fi
  CONF1="$FN/ipsec.conf.${SASG_IP_1[$INDEX]}"
  CONF2="$FN/ipsec.conf.${SASG_IP_2[$INDEX]}"

  echo "Generating $CONF1"
  ipsecconf "${SASG_IP_1[$INDEX]}" "$INDEX" >> $CONF1
  if [ ! -z ${SASG_IP_2[$INDEX]} ];then
    echo "Generating $CONF2"
    ipsecconf "${SASG_IP_2[$INDEX]}" "$INDEX" >> $CONF2
  fi
done # for ((INDEX=0; INDEX<${#SASG_IP_1[@]}.... 
