#!/bin/bash
###########################################################################
# Description: Generate Openvpn configuration file
# Author: Joe boyle
# Date: 2016.07.29
# Config: vars file 
# Main: sasg_main.sh
# Standalone Usage: ./openvpn_rsa.sh
# History:
#    2016.07.29 - Original script.
#    2017.10.31 - SASFW updates - path for easy-rsa updated, now using sasg_common.sh
#    2017.11.01 - SBraun - logging changes, err checking at each step
#    2018.28.03 - SDubrouskaya - added support easy-rsa version 3.0
# Notes:
#    Make sure "Tool Variable Input Section" is completed before running.
###########################################################################
set -e
echo "Generating OpenVPN keys......."
source ./vars
source ./sasg_common.sh
SCRIPT_INFO="$0 v$VERSION"

# If keys exist, we just skip generating keys
if [ -f "$SAS_TLSAUTH_DIR/ca.crt" ]; then
    echo "Keys already exist in $SAS_TLSAUTH_DIR, so skipping key generation..."
    exit 0
else
    echo "Existing keys not found...new key generation may take a few minutes...."
fi

LOGEXIT(){
  MSG="$1"
  RET="$2"
  echo -e "\nERROR: $MSG, \nErrmsgs=$RET"
  exit 1
}

# new path for easy-rsa on redhat (sasfw):
if [ ! -d "$SAS_TLSRSA_DIR" ];then
  echo -e "creating dir $SAS_TLSRSA_DIR ..."
  mkdir -p $SAS_TLSRSA_DIR
fi
RET=$(cp -rv /usr/share/easy-rsa/3/* $SAS_TLSRSA_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp -rv /usr/share/easy-rsa/3/* $SAS_TLSRSA_DIR failed." "$RET"

rm -rf $SAS_TLSRSA_DIR/vars
touch $SAS_TLSRSA_DIR/vars

echo "##################generated by Sasg Script#####################" >>$SAS_TLSRSA_DIR/vars
#echo "export EASY_RSA=\"$SAS_TLSRSA_DIR\"" >>$SAS_TLSRSA_DIR/vars
#echo "export OPENSSL=\"openssl\"" >>$SAS_TLSRSA_DIR/vars
#echo "export PKCS11TOOL=\"pkcs11-tool\"" >>$SAS_TLSRSA_DIR/vars
#echo "export GREP=\"grep\"" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_CONFIG=\`\$EASY_RSA/whichopensslcnf \$EASY_RSA\`" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_DIR=\"$SAS_TLSRSA_DIR/keys\"" >>$SAS_TLSRSA_DIR/vars
#echo "export PKCS11_MODULE_PATH=\"dummy\"" >>$SAS_TLSRSA_DIR/vars
#echo "export PKCS11_PIN=\"dummy\"" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_SIZE=2048" >>$SAS_TLSRSA_DIR/vars
#echo "export CA_EXPIRE=3650" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_EXPIRE=3650" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_COUNTRY=\"US\"" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_PROVINCE=\"NY\"" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_CITY=\"Armonk\"" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_ORG=\"IBM\"" >>$SAS_TLSRSA_DIR/vars
#echo "export KEY_EMAIL=\"admin@us.ibm.com\"" >>$SAS_TLSRSA_DIR/vars

echo "##################generated by Sasg Script#####################" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA \"$SAS_TLSRSA_DIR\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_OPENSSL \"openssl\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_DN \"org\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_PKI \"$SAS_TLSRSA_DIR/keys\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_KEY_SIZE 2048" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_CA_EXPIRE 3650" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_CERT_EXPIRE 3650" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_REQ_COUNTRY \"US\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_REQ_PROVINCE \"NY\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_REQ_CITY \"Armonk\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_REQ_ORG \"IBM\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_REQ_EMAIL \"admin@us.ibm.com\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_BATCH \"yes\"" >>$SAS_TLSRSA_DIR/vars
echo "set_var EASYRSA_REQ_CN \"$HOSTNAME\"" >>$SAS_TLSRSA_DIR/vars

#source $SAS_TLSRSA_DIR/vars

#echo "Cleaning Key Directory....."
#RET=$($SAS_TLSRSA_DIR/clean-all)
#[ "$?" -ne 0 ] && LOGEXIT "failed cleaning key directory." "$RET"

echo "Building a root certificate...."
#RET=$($SAS_TLSRSA_DIR/pkitool --initca $*)
RET=$($SAS_TLSRSA_DIR/easyrsa init-pki)
[ "$?" -ne 0 ] && LOGEXIT "failed building EASYRSA_PKI." "$RET"
RET=$($SAS_TLSRSA_DIR/easyrsa build-ca nopass)
[ "$?" -ne 0 ] && LOGEXIT "failed building root certificate." "$RET"

echo "building Diffie-hellman key...."
#RET=$($SAS_TLSRSA_DIR/build-dh)
RET=$($SAS_TLSRSA_DIR/easyrsa gen-dh)
[ "$?" -ne 0 ] && LOGEXIT "failed building Diffie-hellman key." "$RET"

echo "Building SASFW Server Key......"
echo $HOSTNAME
#RET=$($SAS_TLSRSA_DIR/pkitool --server $HOSTNAME)
RET=$($SAS_TLSRSA_DIR/easyrsa gen-req $HOSTNAME nopass)
[ "$?" -ne 0 ] && LOGEXIT "failed building SASFW server key." "$RET"
RET=$($SAS_TLSRSA_DIR/easyrsa sign-req server $HOSTNAME)
[ "$?" -ne 0 ] && LOGEXIT "failed signing out SASFW server key." "$RET"

echo "Building SASG Key........"
#RET=$($SAS_TLSRSA_DIR/pkitool "$HOSTNAME".SASG )
sed -i.bak s/$HOSTNAME/$HOSTNAME.SASG/ $SAS_TLSRSA_DIR/vars
RET=$($SAS_TLSRSA_DIR/easyrsa gen-req "$HOSTNAME".SASG nopass)
[ "$?" -ne 0 ] && LOGEXIT "failed building SASG key." "$RET"
RET=$($SAS_TLSRSA_DIR/easyrsa sign-req client "$HOSTNAME".SASG)
[ "$?" -ne 0 ] && LOGEXIT "failed signing out SASG key." "$RET"

echo -e "\nOrganizing keys......"
RET=$(cp $SAS_TLSRSA_DIR/keys/ca.crt $SAS_CLIENT_TLSKEYS_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/ca.crt $SAS_CLIENT_TLSKEYS_DIR failed" "$RET"

#RET=$(cp $SAS_TLSRSA_DIR/keys/"$HOSTNAME".SASG.* $SAS_CLIENT_TLSKEYS_DIR)
RET=$(cp $SAS_TLSRSA_DIR/keys/private/"$HOSTNAME".SASG.* $SAS_CLIENT_TLSKEYS_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/"$HOSTNAME".SASG.* $SAS_CLIENT_TLSKEYS_DIR  failed." "$RET"

RET=$(cp $SAS_TLSRSA_DIR/keys/ca.crt $SAS_TLSAUTH_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/ca.crt $SAS_TLSAUTH_DIR failed." "$RET"

#RET=$(cp $SAS_TLSRSA_DIR/keys/dh2048.pem $SAS_TLSAUTH_DIR)
#[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/dh2048.pem $SAS_TLSAUTH_DIR failed." "$RET"
RET=$(cp $SAS_TLSRSA_DIR/keys/dh.pem $SAS_TLSAUTH_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/dh.pem $SAS_TLSAUTH_DIR failed." "$RET"

#RET=$(cp $SAS_TLSRSA_DIR/keys/$HOSTNAME.crt $SAS_TLSAUTH_DIR)
RET=$(cp $SAS_TLSRSA_DIR/keys/issued/$HOSTNAME.crt $SAS_TLSAUTH_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/$HOSTNAME.crt $SAS_TLSAUTH_DIR  failed." "$RET"

#RET=$(cp $SAS_TLSRSA_DIR/keys/$HOSTNAME.key $SAS_TLSAUTH_DIR)
RET=$(cp $SAS_TLSRSA_DIR/keys/private/$HOSTNAME.key $SAS_TLSAUTH_DIR)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/$HOSTNAME.key $SAS_TLSAUTH_DIR  failed." "$RET"

# copy new easy-rsa v3 private keys to just the keys directory so all existing scripts continue to work without modification
RET=$(cp $SAS_TLSRSA_DIR/keys/private/* $SAS_TLSRSA_DIR/keys)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/private/* $SAS_TLSRSA_DIR/keys failed." "$RET"
RET=$(cp $SAS_TLSRSA_DIR/keys/issued/* $SAS_TLSRSA_DIR/keys)
[ "$?" -ne 0 ] && LOGEXIT "cp $SAS_TLSRSA_DIR/keys/issued/* $SAS_TLSRSA_DIR/keys failed." "$RET"

echo -e "\nSASg Client keys:"
ls -lR $SAS_CLIENT_TLSKEYS_DIR

echo -e "\nSASFW Server keys:"
ls -lR $SAS_TLSAUTH_DIR

echo -e "\nKeys created successfully."
exit 0
