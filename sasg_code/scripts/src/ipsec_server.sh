#!/bin/bash
###########################################################################
# Description: Generate IPSec server configuration file for SASFW
# Author: Stan Braun
# Config: vars file 
# Main: ./sasg_main.sh
# Standalone Usage: ./ipsec_server.sh
# History:
#    2017.11.01 - Original script - based on ipsec_client.sh for sasg
#    2017.11.07 - SBraun - added CUR_DIR to get current build dir path - needed when copying files via sudo
#    2017.11.08 - SBraun - chgd dpdtimeout=120s to dpdtimeout=120
#    2017.11.08 - SBraun - chgd rekey=no to rekey=yes - allows dpdaction of restart - sasg side must match
#    2017.12.12 - SBraun - fixed issue with tunnel created for 2nd sasg ip/vip with /32 CIDR even if 2nd sasg not defined.
#    2018.02.21 - SDubrouskaya - added IAMaaS ipsec configuration
#    2018.04.04 - SBraun - added check if SASG_VIP2 is non-blank before trying to add tunnel for it
#    2018.04.25 - SDubrouskaya - Put IAMaaS IPSEC interface into vti0 in case the customer tunnel type is openvpn 
#    2018.08.10 - SBraun - v3.3 - changed TOOLS_SUBNET2 to 2.0.0.0/8 to allow traffic back to IAM LB 2dot ip address which does no sit in SDS subnet.
# Notes:
#    Make sure "Tool Variable Input Section" is completed before running.
###########################################################################
set -e
echo "Generating SASFW IPSec configs......."

source ./vars
source ./sasg_common.sh
SCRIPT_INFO="$0 v$VERSION"
CUR_DIR=$(pwd)

#set -o verbose
##########################################################################

ipsecconf(){
sasg_ip=$1
index=$2

  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP"
  ############################OpenVPN_ipsec.conf###############################
  echo "config setup"
  echo -e "\tinterfaces=\"%none\""

  # loop thru subnets for the site & create tunnel stanzas for each - will come out with same
  # tunnel numbers as cds_vyos_setup.sh creates
  TUN=0
  SASG_SUBNETS=(${CUSTOMER_SUBNETS[$index]})
  for SUBNET in "${SASG_SUBNETS[@]}"
  do
    echo -e "\nconn peer-peer${index}-tunnel-${TUN}"
    echo -e "\tleft=${PUBLIC_VYOS_IP}"
    echo -e "\tright=\"%any\""
    echo -e "\trightid=\"@peer${index}\""
    echo -e "\trekey=yes"
    #TOOLS_SUBNET2=2.$(echo $TOOLS_SUBNET|cut -d"." -f2-4)
    # v3.3 - chgd to 2.0.0.0/8 to allow traffic back to IAM LB 2. ip address which doesn't sit in SDS subnet.
    TOOLS_SUBNET2=2.0.0.0/8
    echo -e "\tleftsubnet=${TOOLS_SUBNET2}"
    if [[ "$SUBNET" =~ ^10\. ]];then
       ONE_SUBNET=1.$(echo $SUBNET | cut -d"." -f2-4)
       echo -e "\trightsubnet=${ONE_SUBNET}"
    else
       echo -e "\trightsubnet=${SUBNET}"
    fi
    echo -e "\tleftsourceip=${PUBLIC_VYOS_IP}"
    echo -e "\tikev2=no"
    echo -e "\tike=aes256-sha1"
    echo -e "\tikelifetime=86400s"
    echo -e "\tdpddelay=30"
    echo -e "\tdpdtimeout=120"
    echo -e "\tdpdaction=restart"
    echo -e "\tkeylife=3600s"
    echo -e "\trekeymargin=540s"
    echo -e "\ttype=tunnel"
    echo -e "\tpfs=no"
    echo -e "\tcompress=no"
    echo -e "\tauthby=secret"
    echo -e "\tauto=start"
    echo -e "\tkeyingtries=%forever"
    echo -e "\tvti-interface=vti0"
    echo -e "\tvti-routing=no"
    echo -e "\tvti-shared=yes"
    echo -e "\tnat-keepalive=yes"
    echo -e "\tmark=0xff00/0xff00"
    ((TUN=TUN+1))
  done # for SUBNET in "${SASG_SUBNETS[@] ...

} # ipsecconf()

#IAMaaS section
ipsecconf_IAMaaS_Juniper(){
  for IAMAAS_SUBNET in ${IAMAAS_PORTABLE_SUBNET}
  do
    IAMAAS_SUBNETS=${IAMAAS_SUBNET}","${IAMAAS_SUBNETS}
  done
  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP"
  ############################OpenVPN_ipsec.conf###############################
  echo "config setup"
  echo -e "\tprotostack=\"netkey\""
  
  #default tunnel settings


  echo -e "\nconn juniper-tunnel-1"
  echo -e "\tleft=${JUNIPER_VPN_IP}"
  echo -e "\tright=${PUBLIC_VYOS_IP}"
  echo -e "\trightid=${PUBLIC_VYOS_IP}"
  echo -e "\trekey=yes"
  echo -e "\tleftsubnets={${IAMAAS_SUBNETS}}        # IAM Portable Subnet"
  echo -e "\trightsubnets={${PRIVATE_VYOS_IP}/32,}     # SASfw private IP"
  echo -e "\tleftsourceip=${JUNIPER_VPN_IP}"
  echo -e "\trightsourceip=${PUBLIC_VYOS_IP}"
  if [ "$TUNNEL_TYPE" == "ipsec" ];then
     echo -e "\tvti-interface=vti1"
  else
     echo -e "\tvti-interface=vti0"
  fi 
  echo -e "\tikelifetime=28800"
  echo -e "\tlifetime=3600"
  echo -e "\ttype=tunnel"
  echo -e "\tike=aes256-sha256;modp1024"
  echo -e "\tphase2alg=aes256-sha256;modp1024"
  echo -e "\tpfs=yes"
  echo -e "\tauthby=secret"
  echo -e "\tauto=start"
  echo -e "\tkeyingtries=%forever"
  echo -e "\tcompress=no"
  echo -e "\tvti-routing=no"
  echo -e "\tmark=0xff00/0xff00"

  for IAMAAS_SUBNET in ${IAMAAS_PRIMARY_SUBNET}
  do
    IAMAAS_SUBNETS=${IAMAAS_SUBNET}","${IAMAAS_SUBNETS}
  done
  
  UNIQUE_1ST_OCTETS=$(echo $IAMAAS_MAPPING | sed "s/[0-9]*;//g")
  for OCTET in ${UNIQUE_1ST_OCTETS}
  do
    CUSTOMER_OCTETS=${OCTET}".0.0.0/8"","${CUSTOMER_OCTETS}
  done
  echo -e "\nconn juniper-tunnel-2"
  echo -e "\tleft=${JUNIPER_VPN_IP}"
  echo -e "\tright=${PUBLIC_VYOS_IP}"
  echo -e "\trightid=${PUBLIC_VYOS_IP}"
  echo -e "\trekey=yes"
  echo -e "\tleftsubnets={${IAMAAS_SUBNETS}} # IAM Subnets"
  echo -e "\trightsubnets={${CUSTOMER_OCTETS}}  # Customer Octets"
  echo -e "\tleftsourceip=${JUNIPER_VPN_IP}"
  echo -e "\trightsourceip=${PUBLIC_VYOS_IP}"
  if [ "$TUNNEL_TYPE" == "ipsec" ];then
     echo -e "\tvti-interface=vti1"
  else
     echo -e "\tvti-interface=vti0"
  fi 
  echo -e "\tikelifetime=28800"
  echo -e "\tlifetime=3600"
  echo -e "\ttype=tunnel"
  echo -e "\tike=aes256-sha256;modp1024"
  echo -e "\tphase2alg=aes256-sha256;modp1024"
  echo -e "\tpfs=yes"
  echo -e "\tauthby=secret"
  echo -e "\tauto=start"
  echo -e "\tkeyingtries=%forever"
  echo -e "\tcompress=no"
  echo -e "\tvti-routing=no"
  echo -e "\tmark=0xff00/0xff00"

} # ipsecconf_IAMaaS_Juniper()
#end IAMaaS section

#DVPN section
ipsecconf_dvpn(){

  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP"
  ############################OpenVPN_ipsec.conf###############################
  echo "config setup"
  echo -e "\tinterfaces=\"%none\""

  for ((INDEX=0; INDEX<${#CUST_PEER_IP[@]}; INDEX++))
  do
    TUN=1
    [ -z ${LOCAL_DVPN_SUBNET[INDEX]} ] && LOCAL_DVPN_SUBNET[${INDEX}]=158.87.31.$((INDEX+152))/32
    [ -z ${ENCR_PH1[INDEX]} ] && ENCR_PH1[${INDEX}]=aes256
    [ -z ${ENCR_PH2[INDEX]} ] && ENCR_PH2[${INDEX}]=aes256
    [ -z ${HASH_PH1[INDEX]} ] && HASH_PH1[${INDEX}]=sha256
    [ -z ${HASH_PH2[INDEX]} ] && HASH_PH2[${INDEX}]=sha256
    [ -z ${LIFETIME_PH1[INDEX]} ] && LIFETIME_PH1[${INDEX}]=28800
    [ -z ${LIFETIME_PH2[INDEX]} ] && LIFETIME_PH2[${INDEX}]=3600
    [ -z ${PFS[INDEX]} ] && PFS[${INDEX}]=yes
    [ -z ${IKEV2[INDEX]} ] && IKEV2[${INDEX}]=yes
    [ -z ${PHASE2ALG[INDEX]} ] && PHASE2ALG[${INDEX}]=yes
    [[ "${PFS[INDEX],,}" == "yes" && -z ${DHG_PH2[${INDEX}]} ]] && DHG_PH2[${INDEX}]=5
    [ -z ${REKEY[INDEX]} ] && REKEY[${INDEX}]=yes
   
    # loop thru subnets for the site & create tunnel stanzas for each - will come out with same
    # tunnel numbers as cds_vyos_setup.sh creates
    for CUSTOMER_SUBNET in ${CUSTOMER_SUBNETS_MASQ_IP[INDEX]}
    do
    echo -e "\nconn peer-${CUST_PEER_IP[INDEX]}-tunnel-${TUN}"
    echo -e "\tleft=${PUBLIC_VYOS_IP}"
    echo -e "\tright=${CUST_PEER_IP[INDEX]}"
    echo -e "\trekey=${REKEY}"
    echo -e "\tleftsubnet=${LOCAL_DVPN_SUBNET[INDEX]}"
    if [ "$(echo $CUSTOMER_SUBNET | grep "/")" == "" ]; then
       echo -e "\trightsubnet=${CUSTOMER_SUBNET}/32"
    else
       echo -e "\trightsubnet=${CUSTOMER_SUBNET}"
    fi   
    echo -e "\tleftsourceip=${PUBLIC_VYOS_IP}"
    echo -e "\tikev2=${IKEV2[INDEX]}"
    if [ -z "${DHG_PH1}"]; then
       echo -e "\tike=${ENCR_PH1[INDEX]}-${HASH_PH1[INDEX]}"
    else
        echo -e "\tike=${ENCR_PH1[INDEX]}-${HASH_PH1[INDEX]};dh${DHG_PH1[${INDEX}]}"
    fi
    if [ "${PHASE2ALG[INDEX],,}" == "yes" ]; then
       if [ "${PFS[INDEX],,}" == "yes" ]; then
          echo -e "\tphase2alg=${ENCR_PH2[INDEX]}-${HASH_PH2[INDEX]};dh${DHG_PH2[${INDEX}]}"
       else
          echo -e "\tphase2alg=${ENCR_PH2[INDEX]}-${HASH_PH2[INDEX]}"
       fi
    fi
    echo -e "\tikelifetime=${LIFETIME_PH1[INDEX]}s"
    echo -e "\tdpddelay=30"
    echo -e "\tdpdtimeout=120"
    echo -e "\tdpdaction=restart"
    echo -e "\tkeylife=${LIFETIME_PH2[INDEX]}s"
    echo -e "\trekeymargin=540s"
    echo -e "\ttype=tunnel"
    echo -e "\tpfs=${PFS[INDEX],,}"
    echo -e "\tcompress=no"
    echo -e "\tauthby=secret"
    echo -e "\tauto=start"
    echo -e "\tkeyingtries=%forever"
    echo -e "\tvti-interface=vti$((INDEX+1))"
    echo -e "\tmark=$((INDEX+1))/0xffffffff"
    echo -e "\tnat-keepalive=yes"
    echo -e "\tleftupdown=/usr/libexec/ipsec/_updown.custom"
    ((TUN=TUN+1))
    done
  done
}
#end DVPN section

#MODEL6 section
ipsecconf_model6(){

  echo "# Generated by $SCRIPT_INFO on $TIMESTAMP"
  ############################OpenVPN_ipsec.conf###############################
  echo "config setup"
  echo -e "\tinterfaces=\"%none\""

  TUN=1

  for ((INDEX=0; INDEX<${#SASG_IP_1[@]}; INDEX++))
  do
    [ -z ${LOCAL_DVPN_SUBNET[INDEX]} ] && LOCAL_DVPN_SUBNET[${INDEX}]=158.87.31.$((INDEX+152))/32
    [ -z ${ENCR_PH1[INDEX]} ] && ENCR_PH1[${INDEX}]=aes256
    [ -z ${ENCR_PH2[INDEX]} ] && ENCR_PH2[${INDEX}]=aes256
    [ -z ${HASH_PH1[INDEX]} ] && HASH_PH1[${INDEX}]=sha256
    [ -z ${HASH_PH2[INDEX]} ] && HASH_PH2[${INDEX}]=sha256
    [ -z ${LIFETIME_PH1[INDEX]} ] && LIFETIME_PH1[${INDEX}]=28800
    [ -z ${LIFETIME_PH2[INDEX]} ] && LIFETIME_PH2[${INDEX}]=3600
    [ -z ${PFS[INDEX]} ] && PFS[${INDEX}]=yes
    [ -z ${IKEV2[INDEX]} ] && IKEV2[${INDEX}]=yes
    [ -z ${PHASE2ALG[INDEX]} ] && PHASE2ALG[${INDEX}]=yes
    [[ "${PFS[INDEX],,}" == "yes" && -z ${DHG_PH2[${INDEX}]} ]] && DHG_PH2[${INDEX}]=5
    [ -z ${REKEY[INDEX]} ] && REKEY[${INDEX}]=yes
    CUSTOMER_SUBNETS_MASQ_IP="${SASG_IP_1[INDEX]} "
    [ ! -z ${SASG_IP_2[INDEX]} ] && CUSTOMER_SUBNETS_MASQ_IP=${CUSTOMER_SUBNETS_MASQ_IP}"${SASG_IP_2[INDEX]} "
    # loop thru subnets for the site & create tunnel stanzas for each - will come out with same
    # tunnel numbers as cds_vyos_setup.sh creates
    for CUSTOMER_SUBNET in ${CUSTOMER_SUBNETS_MASQ_IP} #CUSTOMER_SUBNETS_MASQ_IP - all sasg
    do
    echo -e "\nconn peer-${CUST_PEER_IP}-tunnel-${TUN}"
    echo -e "\tleft=${PUBLIC_VYOS_IP}"
    echo -e "\tright=${CUST_PEER_IP}"
    echo -e "\trekey=${REKEY}"
    echo -e "\tleftsubnet=${LOCAL_DVPN_SUBNET[INDEX]}"
    if [ "$(echo $CUSTOMER_SUBNET | grep "/")" == "" ]; then
       echo -e "\trightsubnet=${CUSTOMER_SUBNET}/32"
    else
       echo -e "\trightsubnet=${CUSTOMER_SUBNET}"
    fi   
    echo -e "\tleftsourceip=${PUBLIC_VYOS_IP}"
    echo -e "\tikev2=${IKEV2[INDEX]}"
    if [ -z "${DHG_PH1}"]; then
       echo -e "\tike=${ENCR_PH1[INDEX]}-${HASH_PH1[INDEX]}"
    else
        echo -e "\tike=${ENCR_PH1[INDEX]}-${HASH_PH1[INDEX]};dh${DHG_PH1[${INDEX}]}"
    fi
    if [ "${PHASE2ALG[INDEX],,}" == "yes" ]; then
       if [ "${PFS[INDEX],,}" == "yes" ]; then
          echo -e "\tphase2alg=${ENCR_PH2[INDEX]}-${HASH_PH2[INDEX]};dh${DHG_PH2[${INDEX}]}"
       else
          echo -e "\tphase2alg=${ENCR_PH2[INDEX]}-${HASH_PH2[INDEX]}"
       fi
    fi
    echo -e "\tikelifetime=${LIFETIME_PH1[INDEX]}s"
    echo -e "\tdpddelay=30"
    echo -e "\tdpdtimeout=120"
    echo -e "\tdpdaction=restart"
    echo -e "\tkeylife=${LIFETIME_PH2[INDEX]}s"
    echo -e "\trekeymargin=540s"
    echo -e "\ttype=tunnel"
    echo -e "\tpfs=${PFS[INDEX],,}"
    echo -e "\tcompress=no"
    echo -e "\tauthby=secret"
    echo -e "\tauto=start"
    echo -e "\tkeyingtries=%forever"
    echo -e "\tvti-interface=vti1"
    echo -e "\tmark=1/0xffffffff"
    echo -e "\tnat-keepalive=yes"
    echo -e "\tleftupdown=/usr/libexec/ipsec/_updown.custom"
    ((TUN=TUN+1))
    done
  done
}
#end MODEL6 section

INDEX=0
if [[ "$TUNNEL_TYPE" == "ipsec" && "${DVPN^^}" != "YES" ]]; then
   ##########################################################################
   # multi-sasg with IPSec - just uses different site-to-site peer ip's on  the tunnels
   # doesnt use portable_vtun_cidr like openvpn
   # It does however use the SASG_MASQ_IP and there should be one MASQ_IP per SASG_IP_1
   # with the array #s matching per site- ie CUSTOMER_SUBNETS[1], SASG_MASQ_IP[1], SASG_IP_1[1]
   for ((INDEX=0; INDEX<${#SASG_IP_1[@]}; INDEX++))
   do
     if [[ -f ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf ]];then
        echo "removing old ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf file................."
        sudo su - root -c "rm ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf 2>&1"
        if [ "$?" -ne 0 ];then
           echo -e "ERROR: sudo su - root -c \"rm ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf 2>&1\"  Failed.  Exiting..."
           exit 1
        fi
     fi

     # write to temp file first in build dir then can copy to appropriate directory with sudo
     CONF1="$CUR_DIR/${SAS_IPSECCONF_PREFIX}${INDEX}.conf"

     echo "Generating $CONF1"
     ipsecconf "${SASG_IP_1[$INDEX]}" "$INDEX" > $CONF1

     echo -e "copying $CONF1 to ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf  ...."
     sudo su - root -c "cp $CONF1 ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf"
     if [ "$?" -ne 0 ];then
        echo -e "ERROR:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf\" Failed.  Exiting..."
        exit 1
     else
        echo -e "Success:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf\" Complete..."
     fi

   done # for ((INDEX=0; INDEX<${#SASG_IP_1[@]}.... 
fi

#Model 5 section
if [[ "${TUNNEL_TYPE^^}" == "MODEL5" ]]; then
   if [[ -f ${SAS_IPSECCONF_DIR}/dvpn_sites.conf ]];then
      echo "removing old ${SAS_IPSECCONF_DIR}/dvpn_sites.conf file................."
        sudo su - root -c "rm ${SAS_IPSECCONF_DIR}/dvpn_sites.conf 2>&1"
        if [ "$?" -ne 0 ];then
           echo -e "ERROR: sudo su - root -c \"rm ${SAS_IPSECCONF_DIR}/dvpn_sites.conf 2>&1\"  Failed.  Exiting..."
           exit 1
        fi
   fi

   # write to temp file first in build dir then can copy to appropriate directory with sudo
   CONF="$CUR_DIR/dvpn_sites.conf"

   echo "Generating $CONF"
   #Check ipsec attributes
   
   ipsecconf_dvpn > $CONF

   echo -e "copying $CONF to ${SAS_IPSECCONF_DIR}/dvpn_sites.conf  ...."
   sudo su - root -c "cp $CONF ${SAS_IPSECCONF_DIR}/dvpn_sites.conf"
   if [ "$?" -ne 0 ];then
      echo -e "ERROR:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/dvpn_sites.conf\" Failed.  Exiting..."
      exit 1
   else
      echo -e "Success:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/dvpn_sites.conf\" Complete..."
   fi
fi

#Model 6 section
if [[ "${TUNNEL_TYPE^^}" == "MODEL6" ]]; then
   if [[ -f ${SAS_IPSECCONF_DIR}/sites.conf ]];then
      echo "removing old ${SAS_IPSECCONF_DIR}/sites.conf file................."
        sudo su - root -c "rm ${SAS_IPSECCONF_DIR}/sites.conf 2>&1"
        if [ "$?" -ne 0 ];then
           echo -e "ERROR: sudo su - root -c \"rm ${SAS_IPSECCONF_DIR}/sites.conf 2>&1\"  Failed.  Exiting..."
           exit 1
        fi
   fi

   # write to temp file first in build dir then can copy to appropriate directory with sudo
   CONF="$CUR_DIR/sites.conf"

   echo "Generating $CONF"
   
   ipsecconf_model6 > $CONF

   

   echo -e "copying $CONF to ${SAS_IPSECCONF_DIR}/sites.conf  ...."
   sudo su - root -c "cp $CONF ${SAS_IPSECCONF_DIR}/sites.conf"
   if [ "$?" -ne 0 ];then
      echo -e "ERROR:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/sites.conf\" Failed.  Exiting..."
      exit 1
   else
      echo -e "Success:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/sites.conf\" Complete..."
   fi
fi


#IAMaaS section
if [ "$IAMaaS" == "YES" ]; then
   CONF1="$CUR_DIR/${SAS_IPSECCONF_PREFIX}${INDEX}.conf"
   
   echo "Generating $CONF1"
   ipsecconf_IAMaaS_Juniper > $CONF1

   echo -e "copying $CONF1 to ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf  ...."
   sudo su - root -c "cp $CONF1 ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf"
   if [ "$?" -ne 0 ];then
      echo -e "ERROR:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf\" Failed.  Exiting..."
      exit 1
   else
      echo -e "Success:  sudo su - root -c \"cp $CONF1 ${SAS_IPSECCONF_DIR}/${SAS_IPSECCONF_PREFIX}${INDEX}.conf\" Complete..."
   fi
fi
#end IAMaaS section

#
# Now need to write a default /etc/ipsec.conf file - move old one then just copy default new file.

# if local template ipsec.conf.sasfw exists then copy it into place.  If for some reason it's not in
# build directory - then just build a new simple one with only the basic info, no comments & use that.

if [ ! -f "$CUR_DIR/ipsec.conf.sasfw" ];then
   echo -e "building default ipsec.conf..."
   echo -e "config setup\n\tprotostack=netkey\n\tlogfile=${SAS_VPNLOG_DIR}/sasvpn01" > $CUR_DIR/ipsec.conf.sasfw
   echo -e "\tdumpdir=/var/run/pluto/\ninclude /etc/ipsec.d/*.conf" >> $CUR_DIR/ipsec.conf.sasfw
fi

if [[ -f /etc/ipsec.conf ]]; then
   echo -e "backing up existing /etc/ipsec.conf as /etc/ipsec.conf.$DATE ..."
   sudo su - root -c "cp /etc/ipsec.conf /etc/ipsec.conf.$DATE"
   if [ "$?" -ne 0 ];then
      echo -e "ERROR: sudo su - root -c \"cp /etc/ipsec.conf /etc/ipsec.conf.$DATE\"  Failed.  Exiting..."
      exit 1
   fi
else
   echo "No \"/etc/ipsec.conf\" file present hence omitting its backup"
fi

echo -e "copying new $CUR_DIR/ipsec.conf.sasfw to /etc/ipsec.conf ..."
sudo su - root -c "cp $CUR_DIR/ipsec.conf.sasfw /etc/ipsec.conf"
if [ "$?" -ne 0 ];then
   echo -e "ERROR: sudo su - root -c \"cp $CUR_DIR/ipsec.conf.sasfw /etc/ipsec.conf\"  Failed.  Exiting..."
   exit 1
fi


echo -e "\nIPsec server config updates complete."
exit 0
